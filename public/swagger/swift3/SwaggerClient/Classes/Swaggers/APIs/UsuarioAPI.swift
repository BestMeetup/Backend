//
// UsuarioAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class UsuarioAPI: APIBase {
    /**
     Login
     
     - parameter email: (query) E-mail de login 
     - parameter password: (query) Senha 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authSignInPost(email: String, password: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        authSignInPostWithRequestBuilder(email: email, password: password).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Login
     - POST /auth/sign_in
     - login
     - responseHeaders: [access-token(String), client(String), uid(String)]
     - responseHeaders: [access-token(String), client(String), uid(String)]
     - responseHeaders: [access-token(String), client(String), uid(String)]
     - examples: [{contentType=application/json, example={
  "data" : {
    "password" : "123456",
    "password_confirmation" : "123456",
    "id" : 1,
    "email" : "email@exemple.com.br"
  },
  "status" : "success"
}}]
     
     - parameter email: (query) E-mail de login 
     - parameter password: (query) Senha 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func authSignInPostWithRequestBuilder(email: String, password: String) -> RequestBuilder<InlineResponse200> {
        let path = "/auth/sign_in"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "email": email,
            "password": password
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Validate Token
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authValidateTokenGet(completion: @escaping ((_ data: DeviseResponseUser?,_ error: Error?) -> Void)) {
        authValidateTokenGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Validate Token
     - GET /auth/validate_token
     - Validate Token
     - API Key:
       - type: apiKey client 
       - name: api_client
     - API Key:
       - type: apiKey uid 
       - name: api_uid
     - API Key:
       - type: apiKey access-token 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "data" : {
    "password" : "123456",
    "password_confirmation" : "123456",
    "id" : 1,
    "email" : "email@exemple.com.br"
  },
  "status" : "success"
}}]

     - returns: RequestBuilder<DeviseResponseUser> 
     */
    open class func authValidateTokenGetWithRequestBuilder() -> RequestBuilder<DeviseResponseUser> {
        let path = "/auth/validate_token"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DeviseResponseUser>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
